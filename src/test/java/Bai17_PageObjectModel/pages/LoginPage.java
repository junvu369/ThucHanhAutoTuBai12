package Bai17_PageObjectModel.pages;

import com.junvu.keywords.WebUI;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.testng.Assert;

import java.util.ArrayList;
import java.util.List;

public class LoginPage {

    //Khai b√°o driver c·ª•c b·ªô
    private WebDriver driver;

    //Khai b√°o h√†m x√¢y d·ª±ng, ƒë·ªÉ truy·ªÅn driver t·ª´ b√™n ngo√†i v√†o ch√≠nh class n√†y s·ª≠ d·ª•ng
    public LoginPage(WebDriver driver) {
        this.driver = driver;
        new WebUI(driver); //Kh·ªüi t·∫°o gi√° tr·ªã driver cho class WebUI

    }

    //Khai b√°o c√°c element d·∫°ng ƒë·ªëi t∆∞·ª£ng By (ph∆∞∆°ng th·ª©c t√¨m ki·∫øm)

    private By headerLogin = By.xpath("//h1[normalize-space()='Login']");
    private By inputEmail = By.xpath("//input[@id='email']");
    private By inputPassword = By.xpath("//input[@id='password']");
    private By buttonLogin = By.xpath("//button[normalize-space()='Login']");
    private By errorMessage = By.xpath("//div[contains(@class,'alert-danger')]");
    private By errorMessage1 = By.xpath("(//div[contains(@class,'alert-danger')])[1]");
    private By errorMessage2 = By.xpath("(//div[contains(@class,'alert-danger')])[2]");
    private By remmemberMeCheckbox = By.xpath("//input[@id='remember']");
    private By forgotPasswordTextlink = By.xpath("//div/a[@href='https://crm.anhtester.com/admin/authentication/forgot_password']");
    private By headerForgotPassword = By.xpath("//h1[normalize-space()='Forgot Password']");
    private By inputemailAddress = By.xpath("//input[@id='email']");
    private By buttonComfirm = By.xpath("//button[normalize-space()='Confirm']");

    //Khai b√°o s·∫µn c√°c h√†m n·ªôi b·ªô trang Login

    public void setEmail(String email) {
//        driver.findElement(inputEmail).sendKeys(email);
        WebUI.setText(inputEmail, email);
    }

    public void setPassword(String password) {
//        driver.findElement(inputPassword).sendKeys(password);
        WebUI.setText(inputPassword, password);
    }

    public void clickLoginButton() {
//        driver.findElement(buttonLogin).click();
        WebUI.clickElement(buttonLogin);
    }

    public void tickOnRememberMe() {
        WebUI.clickElement(remmemberMeCheckbox);
    }

    public void clickOnForgotPassword() {
        WebUI.clickElement(forgotPasswordTextlink);
    }

    public void clickOnConfirmButton() {
        WebUI.clickElement(buttonComfirm);
    }

    public void verifyLoginSuccess() {
        Assert.assertFalse(driver.getCurrentUrl().contains("authentication"), "FAIL. V·∫´n ƒëang ·ªü trang Login");
    }

    public void verifyLoginFail() {
        Assert.assertTrue(driver.getCurrentUrl().contains("authentication"), "FAIL. Kh√¥ng c√≤n ·ªü trang Login");
        Assert.assertTrue(driver.findElement(errorMessage).isDisplayed(), "Errror message does not display");
        Assert.assertEquals(driver.findElement(errorMessage).getText(), "Invalid email or password", "Content of error massage does not match");
    }

    // H√†m chung cho c√°c error message
    public void verifyLoginFail(String message) {
        Assert.assertTrue(driver.getCurrentUrl().contains("authentication"), "FAIL. Kh√¥ng c√≤n ·ªü trang Login");
        Assert.assertTrue(driver.findElement(errorMessage).isDisplayed(), "Errror message does not display");
        Assert.assertEquals(driver.findElement(errorMessage).getText(), message, "Content of error massage does not match");
    }

    public void verifyLoginFailWithNullFields() {
        Assert.assertTrue(driver.getCurrentUrl().contains("authentication"), "FAIL. Kh√¥ng c√≤n ·ªü trang Login");
        Assert.assertTrue(driver.findElement(errorMessage1).isDisplayed(), "Errror message 1 does not display");
        Assert.assertTrue(driver.findElement(errorMessage2).isDisplayed(), "Errror message 2 does not display");

        Assert.assertEquals(WebUI.getTextElement(errorMessage1), "The Password field is required.", "Content of error massage 1 does not match");
        Assert.assertEquals(WebUI.getTextElement(errorMessage2), "The Email Address field is required.", "Content of error massage 2 does not match");

    }

    public void verifyForgotPasswordSuccessfully() {
        Assert.assertTrue(driver.getCurrentUrl().contains("forgot_password"), "Ch∆∞a ƒë·∫øn trang Forgot Password");
        Assert.assertTrue(driver.findElement(headerForgotPassword).isDisplayed(), "Header Forgot Password is not display");


        Assert.assertTrue(driver.findElement(errorMessage).isDisplayed(), "Error message does not display");
        Assert.assertEquals(WebUI.getTextElement(errorMessage), "Error setting new password", "Content of error massage does not match");
    }


//Th·∫ßy vi·∫øt - N√¢ng cao v·ªõi ArrrayList v√† v√≤ng l·∫∑p For (√°p d·ª•ng cho 1 m√†n c√≥ qu√° nhi·ªÅu error message v√† t·ªëi ƒëa h√≥a code, kh√¥ng b·ªã tr√πng l·∫∑p)
//
//    public void verifyLoginFailWithNullFields_ArrayList(int totalNullFields) {
//        // Ki·ªÉm tra v·∫´n ƒëang ·ªü trang Login
//        Assert.assertTrue(driver.getCurrentUrl().contains("authentication"), "FAIL. Kh√¥ng c√≤n ·ªü trang Login");
//
//        // Danh s√°ch c√°c th√¥ng b√°o l·ªói mong ƒë·ª£i
//        List<String> messageString = new ArrayList<>();
//        messageString.add("The Password field is required.");
//        messageString.add("The Email Address field is required.");
//
//        boolean check = false;
//        int index = 0;
//        // Duy·ªát qua t·ª´ng l·ªói hi·ªÉn th·ªã
//        for ( int i = 1; i<= totalNullFields; i++){
//            Assert.assertTrue(driver.findElement(By.xpath("(//div[contains(@class,'alert-danger')])["+ i +"]")).isDisplayed(), "Errror message "+ i +" does not display");
//
//            for (int j = 0; j < messageString.size(); j++){
//                if (WebUI.getTextElement(By.xpath("(//div[contains(@class,'alert-danger')])["+ i +"]")).equals(messageString.get(j))){
//                    check = true;
//                    break;
//                }
//            }
//
//            Assert.assertTrue(check, "The content of error message "+ i +" not match");
//        }
//    }
//    Check code th·∫ßy
//    V√¨ b·∫°n ƒëang so s√°nh t·ª´ng th√¥ng b√°o th·ª±c t·∫ø v·ªõi t·ª´ng ph·∫ßn t·ª≠ trong danh s√°ch mong ƒë·ª£i, n√™n m·ªói th√¥ng b√°o l·ªói c√≥ th·ªÉ b·ªã ƒë·ªçc l·∫°i nhi·ªÅu l·∫ßn, n·∫øu n√≥ kh√¥ng kh·ªõp ngay t·ª´ l·∫ßn ƒë·∫ßu.

//    ·ªû i = 2, ph·∫ßn t·ª≠ th·ª© 2 ƒë∆∞·ª£c g·ªçi 2 l·∫ßn:
//
//    L·∫ßn 1: ƒë·ªÉ so s√°nh v·ªõi d√≤ng "The Password field is required." ‚Üí ‚ùå kh√¥ng match
//
//    L·∫ßn 2: ƒë·ªÉ so s√°nh v·ªõi d√≤ng "The Email Address field is required." ‚Üí ‚úÖ match
//
// -> V√¨ kh√¥ng c√≥ Assert trong v√≤ng j, ch∆∞∆°ng tr√¨nh kh√¥ng fail ngay ·ªü l·∫ßn kh√¥ng match. N√≥ ch·ªâ ki·ªÉm tra check sau v√≤ng j.

    public void verifyLoginFailWithNullFields_ArrayListOptimized(int totalNullFields) {
        // Ki·ªÉm tra v·∫´n ·ªü trang login
        Assert.assertTrue(driver.getCurrentUrl().contains("authentication"), "FAIL. Kh√¥ng c√≤n ·ªü trang Login");

        // Danh s√°ch th√¥ng b√°o l·ªói mong ƒë·ª£i
        List<String> expectedMessages = new ArrayList<>();
        expectedMessages.add("The Password field is required.");
        expectedMessages.add("The Email Address field is required.");
        // C√≥ th·ªÉ th√™m c√°c d√≤ng l·ªói kh√°c n·∫øu c·∫ßn

        for (int i = 1; i <= totalNullFields; i++) {
            By locator = By.xpath("(//div[contains(@class,'alert-danger')])[" + i + "]");

            // Ki·ªÉm tra hi·ªÉn th·ªã
            Assert.assertTrue(driver.findElement(locator).isDisplayed(), "‚ùå Error message " + i + " is not displayed.");

            // ‚úÖ G·ªåI getTextElement 1 l·∫ßn duy nh·∫•t
            String actualMessage = WebUI.getTextElement(locator);
            System.out.println("üîç Message " + i + ": " + actualMessage);

            // ‚úÖ So s√°nh v·ªõi t·∫•t c·∫£ expected messages
            boolean matchFound = false;
            for (String expected : expectedMessages) {
                if (actualMessage.equals(expected)) {
                    matchFound = true;
                    System.out.println("‚úÖ Matched with expected: " + expected);
                    break;
                }
            }

            // ‚ùå N·∫øu kh√¥ng kh·ªõp d√≤ng n√†o ‚Üí Fail
            Assert.assertTrue(matchFound, "‚ùå Message " + i + " content does not match any expected message.");
        }
    }

    //C√°c h√†m x·ª≠ l√Ω cho ch√≠nh trang n√†y
    public void loginCRM(String email, String password) { //Truy·ªÅn tham s·ªë ·ªü ƒë√¢y ƒë·ªÉ t√πy √Ω ƒëi·ªÅu ch·ªânh email v√† pasword
//        driver.get("https://crm.anhtester.com/admin/authentication");
        //C√°ch 1: D√πng h√†m chung (c√≥ th·ªÉ ghi log, d√πng thread sleep)
//        setEmail(email);
//        setPassword(password);
//        clickLoginButton();

        //C√°ch 2: D√πng driver.findElement
//        driver.findElement(inputEmail).sendKeys(email);
//        driver.findElement(inputPassword).sendKeys(password);
//        driver.findElement(buttonLogin).click();


        //C√°ch 3: G·ªçi h√†m chung t·ª´ WebUI v√†o, kh√¥ng c·∫ßn d√πng c√°ch 1 v√† 2 v√† kh√¥ng d√πng 3 h√†m private trung gian ph√≠a tr√™n n·ªØa
        WebUI.openWebsite("https://crm.anhtester.com/admin/authentication");
        WebUI.setText(inputEmail, email);
        WebUI.setText(inputPassword, password);
        WebUI.clickElement(buttonLogin);
    }

    //H√†m Log in m·ªõi n√†y s·∫Ω d√πng cho c√°c Page kh√°c
    public void loginCRM() {

        WebUI.openWebsite("https://crm.anhtester.com/admin/authentication");
        WebUI.setText(inputEmail, "admin@example.com");
        WebUI.setText(inputPassword, "123456");
        WebUI.clickElement(buttonLogin);
        verifyLoginSuccess();
    }

    public void forgotPassword(String email) {
        clickOnForgotPassword();
        setEmail(email);
        clickOnConfirmButton();
    }

}